{"version":3,"sources":["questions.data.js","game.component.jsx","reportWebVitals.js","index.js"],"names":["QUESTIONS","question","answer","Game","setAnswers","event","setState","currentAnswer","target","value","handleEnter","console","log","key","verify","state","questionDisplay","swal","then","currentQuestion","questions","length","finish","this","className","type","placeholder","onChange","onKeyDown","onClick","src","alt","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAaA,EAAY,CACrB,CACIC,SAAU,iBACVC,OAAQ,WAEZ,CACID,SAAU,gBACVC,OAAQ,QAEZ,CACID,SAAU,mBACVC,OAAQ,QAEZ,CACID,SAAU,iBACVC,OAAQ,QAEZ,CACID,SAAU,0CACVC,OAAQ,SAEZ,CACID,SAAU,2CACVC,OAAQ,QAEZ,CACID,SAAU,qDACVC,OAAQ,QAEZ,CACID,SAAU,4DACVC,OAAQ,Y,+BC1BKC,E,kDACjB,aAAe,IAAD,8BACV,gBAUJC,WAAa,SAACC,GACV,EAAKC,SAAS,CACVC,cAAeF,EAAMG,OAAOC,SAbtB,EAiBdC,YAAc,SAACL,GACXM,QAAQC,IAAI,QAASP,EAAMQ,KACV,UAAdR,EAAMQ,KACL,EAAKC,UApBC,EAwBdA,OAAS,WACF,EAAKC,MAAMC,gBAAgBd,SAAW,EAAKa,MAAMR,cAChDU,IAAK,qBAAsB,aAAc,WACpCC,MAAK,WACc,EAAKH,MAAMI,gBAAkB,IAC5B,EAAKJ,MAAMK,UAAUC,OAClC,EAAKf,SAAS,CACVgB,QAAQ,IAGZ,EAAKhB,SAAS,CACVU,gBAAiB,EAAKD,MAAMK,UAAU,EAAKL,MAAMI,gBAAkB,GACnEA,gBAAiB,EAAKJ,MAAMI,gBAAkB,EAC9CZ,cAAe,QAK/BU,IAAK,uBAAwB,mBAAoB,UAxCrD,EAAKF,MAAQ,CACTK,UAAWpB,EACXmB,gBAAiB,EACjBH,gBAAiBhB,EAAU,GAC3BO,cAAe,GACfe,QAAQ,GAPF,E,0CA8Cd,WAAU,IAAD,EAC4CC,KAAKR,MAA/CC,EADF,EACEA,gBAAiBT,EADnB,EACmBA,cAAee,EADlC,EACkCA,OACvC,OACI,sBAAKE,UAAU,OAAf,WACMF,GACE,sBAAKE,UAAU,YAAf,UACI,+BAAM,6FACN,mBAAGA,UAAU,WAAb,SAAyBR,EAAgBf,WACzC,uBAAOuB,UAAU,eAAeC,KAAK,OAAOC,YAAY,kCAA+BjB,MAAOF,EAAeoB,SAAUJ,KAAKnB,WAAYwB,UAAWL,KAAKb,cACxJ,wBAAQc,UAAU,aAAaC,KAAK,SAASI,QAASN,KAAKT,OAA3D,0BAGPQ,GACG,sBAAKE,UAAU,sBAAf,UACI,2CACA,qBAAKA,UAAU,aAAaM,IAAI,iEAAiEC,IAAI,uB,GA9D3FC,aCOnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc3edafd.chunk.js","sourcesContent":["export const QUESTIONS = [\n    {\n        question: '<!______ html>',\n        answer: 'DOCTYPE'\n    },\n    {\n        question: '<html></____>',\n        answer: 'html'\n    },\n    {\n        question: '<html ____=\"es\">',\n        answer: 'lang'\n    },\n    {\n        question: '<_____></head>',\n        answer: 'head'\n    },\n    {\n        question: '<______>Titulo de la página</______>',\n        answer: 'title'\n    },\n    {\n        question: '<_____ name=\"author\" content=\"John Doe\">',\n        answer: 'meta'\n    },\n    {\n        question: '<meta ____=\"description\" content=\"Mi primer HTML\">',\n        answer: 'name'\n    },\n    {\n        question: '<meta name=\"keywords\" ________=\"HTML, HTML5, Estructura\">',\n        answer: 'content'\n    }\n];","import React, {Component} from 'react';\nimport {QUESTIONS} from './questions.data';\nimport swal from 'sweetalert';\nimport './game.styles.css';\n\nexport default class Game extends Component {\n    constructor() {\n        super();\n        this.state = {\n            questions: QUESTIONS,\n            currentQuestion: 0,\n            questionDisplay: QUESTIONS[0],\n            currentAnswer: '',\n            finish: false\n        }\n    }\n\n    setAnswers = (event) => {\n        this.setState({\n            currentAnswer: event.target.value\n        });\n    }\n\n    handleEnter = (event) => {\n        console.log('key: ', event.key);\n        if(event.key === 'Enter') {\n            this.verify();\n        }\n    }\n\n    verify = () => {\n        if(this.state.questionDisplay.answer === this.state.currentAnswer) {\n            swal(\"Respuesta Correcta\", \"Bien hecho\", \"success\")\n                .then(() => {\n                    let nextQuest = this.state.currentQuestion + 1;\n                    if(nextQuest === this.state.questions.length) {\n                        this.setState({\n                            finish: true\n                        });\n                    } else {\n                        this.setState({\n                            questionDisplay: this.state.questions[this.state.currentQuestion + 1],\n                            currentQuestion: this.state.currentQuestion + 1,\n                            currentAnswer: ''\n                        });\n                    }\n                })\n        } else {\n            swal(\"Respuesta incorrecta\", \"Intenta otra vez\", \"error\");\n        }\n    }\n\n    render() {\n        const {questionDisplay, currentAnswer, finish} = this.state;\n        return(\n            <div className=\"game\">\n                {!finish && \n                    <div className=\"game-card\">\n                        <span><b>Introduce la palabra que falta para completar la sentencia</b></span>\n                        <p className=\"question\">{questionDisplay.question}</p>\n                        <input className=\"custom-input\" type=\"text\" placeholder=\"Escribe aquí tu respuesta...\" value={currentAnswer} onChange={this.setAnswers} onKeyDown={this.handleEnter} />\n                        <button className=\"custom-btn\" type=\"button\" onClick={this.verify}>Verificar</button>\n                    </div>\n                }\n                {finish && \n                    <div className=\"game-card centering\">\n                        <h1>Terminado</h1>\n                        <img className=\"img-finish\" src=\"http://assets.stickpng.com/thumbs/5aa78e207603fc558cffbf19.png\" alt=\"Finished\" />\n                    </div>\n                }\n            </div>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game.component';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}